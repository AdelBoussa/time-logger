{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebDev\\\\time-logger\\\\src\\\\Button.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Button() {\n  _s();\n  const [clicks, setClicks] = useState([]);\n  const [comment, setComment] = useState('');\n  const commentInputRef = useRef(null);\n  const handleClick = () => {\n    const currentTime = new Date().toLocaleTimeString();\n    const newClick = {\n      time: currentTime,\n      comment: comment.trim()\n    };\n    setClicks([newClick, ...clicks]); // Add new click to the beginning of the array\n    setComment(''); // Reset comment input field\n    commentInputRef.current.focus(); // Focus on the comment input field after clicking the button\n  };\n\n  const handleCommentChange = event => {\n    setComment(event.target.value);\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      handleClick();\n    }\n  };\n  const handleCopyToClipboard = () => {\n    const textToCopy = clicks.map(click => `${click.time}: ${click.comment}`).join('\\n');\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      alert('Text copied to clipboard!');\n    }).catch(error => {\n      console.error('Failed to copy text to clipboard:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"button\",\n      onClick: handleClick,\n      children: \" Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"input input-alt\",\n        placeholder: \"Add comment\",\n        ref: commentInputRef,\n        type: \"text\",\n        value: comment,\n        onChange: handleCommentChange,\n        onKeyDown: handleKeyDown,\n        required: \"\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"input-border input-border-alt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textContainer\",\n      children: clicks.map((click, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textLine\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: click.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", click.comment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"copyButton\",\n      onClick: handleCopyToClipboard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Button, \"iI3JCQjX2uj4YxRALtJY7BArKVI=\");\n_c = Button;\nexport default Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","Button","_s","clicks","setClicks","comment","setComment","commentInputRef","handleClick","currentTime","Date","toLocaleTimeString","newClick","time","trim","current","focus","handleCommentChange","event","target","value","handleKeyDown","key","preventDefault","handleCopyToClipboard","textToCopy","map","click","join","navigator","clipboard","writeText","then","alert","catch","error","console","children","class","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","ref","type","onChange","onKeyDown","required","className","index","_c","$RefreshReg$"],"sources":["D:/WebDev/time-logger/src/Button.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction Button() {\r\n    const [clicks, setClicks] = useState([]);\r\n    const [comment, setComment] = useState('');\r\n    const commentInputRef = useRef(null);\r\n  \r\n    const handleClick = () => {\r\n      const currentTime = new Date().toLocaleTimeString();\r\n      const newClick = {\r\n        time: currentTime,\r\n        comment: comment.trim(),\r\n      };\r\n      setClicks([newClick, ...clicks]); // Add new click to the beginning of the array\r\n      setComment(''); // Reset comment input field\r\n      commentInputRef.current.focus(); // Focus on the comment input field after clicking the button\r\n    };\r\n  \r\n    const handleCommentChange = (event) => {\r\n      setComment(event.target.value);\r\n    };\r\n    const handleKeyDown = (event) => {\r\n      if (event.key === 'Enter') {\r\n        event.preventDefault();\r\n        handleClick();\r\n      }\r\n    };\r\n    const handleCopyToClipboard = () => {\r\n      const textToCopy = clicks.map((click) => `${click.time}: ${click.comment}`).join('\\n');\r\n      navigator.clipboard.writeText(textToCopy)\r\n        .then(() => {\r\n          alert('Text copied to clipboard!');\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to copy text to clipboard:', error);\r\n        });\r\n    };\r\n  return (\r\n    <div>\r\n     \r\n      <button class=\"button\" onClick={handleClick}> Log\r\n        </button>\r\n        \r\n      <div class=\"form-control\">\r\n            <input class=\"input input-alt\" placeholder=\"Add comment\" ref={commentInputRef} type=\"text\" value={comment} onChange={handleCommentChange} onKeyDown ={handleKeyDown} required=\"\" type=\"text\"></input>\r\n            <span class=\"input-border input-border-alt\"></span>\r\n        </div>\r\n      <div className=\"textContainer\">\r\n        {clicks.map((click, index) => (\r\n          <div key={index} className=\"textLine\">\r\n            <span>{click.time}</span>\r\n            <span> {click.comment}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button className=\"copyButton\" onClick={handleCopyToClipboard}>\r\n      \r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}